class Solution:
    def numIslands(self, grid):
        res = 0 # 岛屿数量
        m, n = len(grid), len(grid[0])
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    res += 1    # 岛屿数量+1
                    # self.dfs(grid, i, j)    # dfs遍历
                    self.bfs(grid, i, j)    # bfs遍历
        return res

    # 遍历上下左右4个方位的区域
    def dfs(self, grid, i, j):
        m, n = len(grid), len(grid[0])
        # 判断当前区域是否是岛屿，若不是则开始下一次递归
        if i < 0 or i >= m or j < 0 or j >= n or grid[i][j] == '0':
            return
        grid[i][j] = '0'    # 将当前区域归0
        self.dfs(grid, i-1, j)  # 上
        self.dfs(grid, i+1, j)  # 下
        self.dfs(grid, i, j-1)  # 左
        self.dfs(grid, i, j+1)  # 右

    def bfs(self, grid, i, j):
        m, n = len(grid), len(grid[0])
        queue = []
        queue.append((i, j))
        while queue:
            head = queue.pop(0)
            i, j = head[0], head[1]
            grid[i][j] = '0'    # 将当前区域归0
            if i-1 >= 0 and grid[i-1][j] == '1':    # 上
                grid[i-1][j] = '0'
                queue.append((i-1, j))
            if i+1 < m and grid[i+1][j] == '1':     # 下
                grid[i+1][j] = '0'
                queue.append((i+1, j))
            if j-1 >= 0 and grid[i][j-1] == '1':    # 左
                grid[i][j-1] = '0'
                queue.append((i, j-1))
            if j+1 < n and grid[i][j+1] == '1':     # 右
                grid[i][j+1] = '0'
                queue.append((i, j+1))

grid1 = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]

grid2 = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]

slt = Solution()
print(slt.numIslands(grid1))
print(slt.numIslands(grid2))