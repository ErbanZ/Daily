class Solution:
    def isValidSudoku(self, board):
        n = len(board)
        rows = [[0] * n for i in range(n)]
        cols = [[0] * n for i in range(n)]
        cell = [[0] * n for i in range(n)]
        for i in range(n):
            for j in range(n):
                if board[i][j] == '.':
                    continue
                num = int(board[i][j]) - 1
                k = i // 3 * 3 + j // 3
                if rows[i][num] != 0 or cols[j][num] != 0 or cell[k][num] != 0:
                    return False
                rows[i][num] = cols[j][num] = cell[k][num] = 1
        return True


board1 = [["5","3",".",".","7",".",".",".","."]
        ,["6",".",".","1","9","5",".",".","."]
        ,[".","9","8",".",".",".",".","6","."]
        ,["8",".",".",".","6",".",".",".","3"]
        ,["4",".",".","8",".","3",".",".","1"]
        ,["7",".",".",".","2",".",".",".","6"]
        ,[".","6",".",".",".",".","2","8","."]
        ,[".",".",".","4","1","9",".",".","5"]
        ,[".",".",".",".","8",".",".","7","9"]]

board2 = [["8","3",".",".","7",".",".",".","."]
        ,["6",".",".","1","9","5",".",".","."]
        ,[".","9","8",".",".",".",".","6","."]
        ,["8",".",".",".","6",".",".",".","3"]
        ,["4",".",".","8",".","3",".",".","1"]
        ,["7",".",".",".","2",".",".",".","6"]
        ,[".","6",".",".",".",".","2","8","."]
        ,[".",".",".","4","1","9",".",".","5"]
        ,[".",".",".",".","8",".",".","7","9"]] 

slt = Solution()
print(slt.isValidSudoku(board1))
print(slt.isValidSudoku(board2))